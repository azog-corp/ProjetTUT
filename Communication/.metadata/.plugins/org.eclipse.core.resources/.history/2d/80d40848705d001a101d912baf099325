package nvProjet;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.ArrayList;

public class Serveur {
	/** Liste desclients a traiter */
	static ArrayList<Client> listeClient = new ArrayList<Client>();
	static DatagramSocket socket; 
	static byte[] buffer;
	static String message;
	static DatagramPacket paquet;
	int compteur;

	public static void main(String[] args) {
		System.out.println("Serveur lancé !");
		int compteur = 0;
		try {
			socket = new DatagramSocket(4523);
		} catch (SocketException e1) {
			
		} 
		while(true) {
			try {
				buffer = new byte[100];
				paquet = new DatagramPacket(buffer,100);
				socket.receive(paquet);
				message = new String(buffer);
				switch(message.charAt(0)) {
				case 'i':
					inscription();
					break;
				case 'a':
					acquittement();
					break;
				case 'f':
					terminer();
					break;
				}
				traiterClient();
				verifierPretAEnvoyer();
				verifierFini();
				compteur++;
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	private static void terminer() {
		for(int i=0; i < listeClient.size(); i++) {
			if(listeClient.get(i).getAdresseIp().equals(paquet.getAddress())) {
				listeClient.get(i).setFini(true);
			}
		}
	}

	private static void verifierPretAEnvoyer() throws IOException{
		for(int i=0; i < listeClient.size(); i++) {
			if(listeClient.get(i).isPretAenvoyer()) {
				envoyer(listeClient.get(i).getAdresseIp(),listeClient.get(i).getMessage());
			}
		}
	}

	private static void envoyer(InetAddress adresseIp, String msg)  throws IOException{
		int port = 4523;
		//TODO preparer requete et decouper
		socket.send(new DatagramPacket(msg.getBytes(), msg.getBytes().length,
					adresseIp, port));
		//si toutes les ack ok
		
	}

	private static void verifierFini() {
		for(int i=0; i < listeClient.size(); i++) {
			if(listeClient.get(i).isFini()) {
				listeClient.remove(i);
			}
		}
		
	}

	private static void traiterClient() {
		for(int i = 0; i <  listeClient.size(); i++) {
			if(!listeClient.get(i).isTempTraiter()) {
				traiter(listeClient.get(i));
				//TODO BREAK ?
			}
		}

	}

	private static void traiter(Client client) {
		new Service();
	}

	public static void inscription() {
		listeClient.add(new Client(paquet.getAddress(),message));
		//TODO repondre ACK
	}

	public static void acquittement() throws IOException{
		
	}
}
